/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-chip-input-mixin.html
 */

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />

declare namespace ArcBehaviors {


  /**
   * A behavior to be implemented with inputs that uses `paper-chips`.
   */
  function PaperChipInputMixin<T extends new (...args: any[]) => {}>(base: T): T & PaperChipInputMixinConstructor;

  interface PaperChipInputMixinConstructor {
    new(...args: any[]): PaperChipInputMixin;
  }

  interface PaperChipInputMixin {

    /**
     * A paper input element.
     */
    _inputElement: object|null|undefined;

    /**
     * The label for this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * `<label>`'s content and `hidden` property, e.g.
     * `<label hidden$="[[!label]]">[[label]]</label>` in your `template`
     */
    label: string|null|undefined;

    /**
     * The value for this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * the `<iron-input>`'s `bindValue`
     * property, or the value property of your input that is `notify:true`.
     */
    readonly value: any;

    /**
     * Set to true to disable this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * both the `<paper-input-container>`'s and the input's `disabled` property.
     */
    disabled: boolean|null|undefined;

    /**
     * Returns true if the value is invalid. If you're using PaperInputBehavior
     * to implement your own paper-input-like element, bind this to both the
     * `<paper-input-container>`'s and the input's `invalid` property.
     *
     * If `autoValidate` is true, the `invalid` attribute is managed
     * automatically, which can clobber attempts to manage it manually.
     */
    invalid: boolean|null|undefined;

    /**
     * Set this to specify the pattern allowed by `preventInvalidInput`. If
     * you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `allowedPattern`
     * property.
     */
    allowedPattern: string|null|undefined;

    /**
     * Set to true to always float the label. If you're using PaperInputBehavior
     * to implement your own paper-input-like element, bind this to the
     * `<paper-input-container>`'s `alwaysFloatLabel` property.
     */
    alwaysFloatLabel: boolean|null|undefined;

    /**
     * A pattern to validate the `input` with. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<input is="iron-input">`'s `pattern` property.
     */
    pattern: string|null|undefined;

    /**
     * Set to true to mark the input as required. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<input is="iron-input">`'s `required` property.
     */
    required: boolean|null|undefined;

    /**
     * The error message to display when the input is invalid. If you're using
     * PaperInputBehavior to implement your own paper-input-like element,
     * bind this to the `<paper-input-error>`'s content, if using.
     */
    errorMessage: string|null|undefined;

    /**
     * Set to true to show a character counter.
     */
    charCounter: boolean|null|undefined;

    /**
     * Set to true to auto-validate the input value. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<paper-input-container>`'s `autoValidate` property.
     */
    autoValidate: boolean|null|undefined;

    /**
     * Name of the validator to use. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * the `<input is="iron-input">`'s `validator` property.
     */
    validator: string|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autofocus`
     * property.
     */
    autofocus: boolean|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `inputmode`
     * property.
     */
    inputmode: string|null|undefined;

    /**
     * The minimum length of the input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `minlength`
     * property.
     */
    minlength: number|null|undefined;

    /**
     * The maximum length of the input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `maxlength`
     * property.
     */
    maxlength: number|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `name` property.
     */
    name: string|null|undefined;

    /**
     * A placeholder string in addition to the label. If this is set, the label
     * will always float.
     */
    placeholder: string|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `readonly`
     * property.
     */
    readonly: boolean|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocapitalize`
     * property.
     */
    autocapitalize: string|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocorrect`
     * property.
     */
    autocorrect: string|null|undefined;

    /**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autosave`
     * property, used with type=search.
     */
    autosave: string|null|undefined;

    /**
     * A list of chip items to render
     */
    chips: Array<object|null>|null;

    /**
     * Actual paper-input value
     */
    _value: string|null|undefined;

    /**
     * List of allowed chips labels. Character case does not matter.
     */
    allowed: Array<String|null>|null;

    /**
     * List of suggestions to render when the user type in the input field.
     *
     * Each array item can be a string which will be compared to user input.
     * If the item is an object is must contain the `value` property which
     * is used to compare the values. It can also contain `icon` property
     * which is used to render `<iron-icon>`. It may also contain
     * `image` property which is used to pass to `<iron-image>` element.
     *
     * ### Example
     *
     * ```json
     * [
     *  "item 1",
     *  {
     *    "value": "Other item",
     *    "icon": "add"
     *  },
     *  {
     *    "value": "Image item",
     *    "image": "path/to/image.png"
     *  }
     * ]
     * ```
     */
    source: any;
    connectedCallback(): void;

    /**
     * Validates the input element and sets an error style if needed.
     */
    validate(): boolean;
    _autofocusChanged(): void;

    /**
     * Computes value for paper-chip's `removable` property.
     *
     * @param item `chips` list item.
     */
    _computeChipRemovable(item: object|null): Boolean|null;

    /**
     * Adds a new chip to the list of chips.
     *
     * @param label Label of the chip
     * @param removable True if the chip can be removed.
     * @param icon An icon to pass to the chip.
     */
    addChip(label: String|null, removable: Boolean|null, icon: String|null): void;

    /**
     * Computes value of the form input. Produced value is an array of chip
     * labels.
     *
     * @param record Polymer's data change record.
     */
    _computeValue(record: object|null): Array<String|null>|null|undefined;

    /**
     * Tests if given value is allowed to enter when `allowed` property is set.
     *
     * @param value The value to test
     * @returns True if the value is allowed as a chip label.
     */
    _isAllowed(value: String|null): Boolean|null;

    /**
     * Removes a chip on a specific index.
     *
     * @param index Index of the chip in the `chips` array
     */
    _removeChip(index: Number|null): void;
  }
}
