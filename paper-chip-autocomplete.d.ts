/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-chip-autocomplete.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/legacy/class.d.ts" />
/// <reference path="../iron-a11y-keys/iron-a11y-keys.d.ts" />
/// <reference path="../paper-ripple/paper-ripple.d.ts" />
/// <reference path="../paper-item/paper-item.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />
/// <reference path="../iron-selector/iron-selector.d.ts" />
/// <reference path="../iron-scroll-target-behavior/iron-scroll-target-behavior.d.ts" />
/// <reference path="../iron-overlay-behavior/iron-overlay-behavior.d.ts" />

declare namespace UiElements {

  /**
   * An autocomplete element for `paper-chip-input`.
   * It is a lightweigth version of `paper-autocomplete` element.
   *
   * ### Styling
   *
   * ## Styling
   *
   * `<paper-chip-autocomplete>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--paper-chip-autocomplete` | Mixin applied to this elment | `{}`
   * `--paper-chip-autocomplete-background-color` | Background color of the element. | `inherit`
   */
  class PaperChipAutocomplete extends
    Polymer.IronOverlayBehavior(
    Polymer.IronScrollTargetBehavior(
    Object)) {

    /**
     * List of suggestions to render when the user type in the input field.
     *
     * Each array item can be a string which will be compared to user input.
     * If the item is an object is must contain the `value` property which
     * is used to compare the values. It can also contain `icon` property
     * which is used to render `<iron-icon>`. It may also contain
     * `image` property which is used to pass to `<iron-image>` element.
     *
     * ### Example
     *
     * ```json
     * [
     *  "item 1",
     *  {
     *    "value": "Other item",
     *    "icon": "add"
     *  },
     *  {
     *    "value": "Image item",
     *    "image": "path/to/image.png"
     *  }
     * ]
     * ```
     */
    source: any;

    /**
     * The value of the input field connected to this autocomplete
     */
    value: string|null|undefined;

    /**
     * List of computed and sotred suggestion to render.
     */
    readonly _suggestions: Array<object|null>|null;

    /**
     * Computed value, `true` if has any suggestions to render.
     */
    readonly _hasSuggestions: boolean|null|undefined;

    /**
     * Application's / parent element's scroll target element.
     */
    scrollTarget: HTMLElement|null;

    /**
     * Sizing target element. It is used to compute the size of the
     * autocomplete container.
     */
    sizingTarget: HTMLElement|null;

    /**
     * The input element used to input value.
     * It is used to observe keys pressed
     */
    inputTarget: HTMLElement|null;

    /**
     * Currently selected item on a suggestions list.
     */
    selectedItem: Number|null;
    _computeSuggestions(value: any, source: any): any;

    /**
     * Computes value for `hasSuggestions` property
     *
     * @param suggestions Computed suggestions
     */
    _computeHasSuggestions(suggestions: Array<object|null>|null): Boolean|null;

    /**
     * Opens the suggestions if list of suggestions changed
     */
    _hasSuggestionsChanged(hasSuggestions: Boolean|null): void;

    /**
     * Highlight previous suggestion
     */
    selectPrevious(): void;

    /**
     * Highlight next suggestion
     */
    selectNext(): void;

    /**
     * Accepts currently selected suggestion and enters it into a text field.
     */
    acceptSelection(): void;

    /**
     * Dispatches non bubbling `selected` custom event.
     *
     * @param value Selected suggestion value.
     */
    _inform(value: object|null): void;

    /**
     * Ensure that the selected item is visible in the scroller.
     * When there is more elements to show than space available (height)
     * then some elements will be hidden. When the user use arrows to navigate
     * the selection may get out from the screen. This function ensures that
     * currently selected element is visible.
     *
     * @param bottom If trully it will ensure that the element is
     * visible at the bottom of the container. On the top otherwise.
     */
    ensureItemVisible(bottom: Boolean|null): void;
    _itemClickHandler(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "paper-chip-autocomplete": UiElements.PaperChipAutocomplete;
}
