{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ArcBehaviors",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "paper-chip-input-mixin.html",
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 21,
          "column": 27
        }
      },
      "mixins": [
        {
          "description": "A behavior to be implemented with inputs that uses `paper-chips`.",
          "summary": "",
          "path": "paper-chip-input-mixin.html",
          "properties": [
            {
              "name": "_inputElement",
              "type": "Object | null | undefined",
              "description": "A paper input element.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "label",
              "type": "string | null | undefined",
              "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 8
                },
                "end": {
                  "line": 48,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<iron-input>`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 56,
                  "column": 78
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "disabled",
              "type": "boolean | null | undefined",
              "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 8
                },
                "end": {
                  "line": 62,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "invalid",
              "type": "boolean | null | undefined",
              "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 8
                },
                "end": {
                  "line": 71,
                  "column": 46
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "allowedPattern",
              "type": "string | null | undefined",
              "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 8
                },
                "end": {
                  "line": 78,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "alwaysFloatLabel",
              "type": "boolean | null | undefined",
              "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 8
                },
                "end": {
                  "line": 84,
                  "column": 55
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "pattern",
              "type": "string | null | undefined",
              "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 8
                },
                "end": {
                  "line": 90,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "required",
              "type": "boolean | null | undefined",
              "description": "Set to true to mark the input as required. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `required` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 96,
                  "column": 8
                },
                "end": {
                  "line": 96,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "errorMessage",
              "type": "string | null | undefined",
              "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 8
                },
                "end": {
                  "line": 102,
                  "column": 36
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "charCounter",
              "type": "boolean | null | undefined",
              "description": "Set to true to show a character counter.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 106,
                  "column": 36
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "autoValidate",
              "type": "boolean | null | undefined",
              "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 8
                },
                "end": {
                  "line": 112,
                  "column": 37
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "validator",
              "type": "string | null | undefined",
              "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 8
                },
                "end": {
                  "line": 118,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "autofocus",
              "type": "boolean | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 124,
                  "column": 65
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_autofocusChanged\"",
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "inputmode",
              "type": "string | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 8
                },
                "end": {
                  "line": 130,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "minlength",
              "type": "number | null | undefined",
              "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 8
                },
                "end": {
                  "line": 137,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "maxlength",
              "type": "number | null | undefined",
              "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 144,
                  "column": 8
                },
                "end": {
                  "line": 144,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "name",
              "type": "string | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 8
                },
                "end": {
                  "line": 149,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "placeholder",
              "type": "string | null | undefined",
              "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 8
                },
                "end": {
                  "line": 158,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"\""
            },
            {
              "name": "readonly",
              "type": "boolean | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 8
                },
                "end": {
                  "line": 164,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "autocapitalize",
              "type": "string | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 8
                },
                "end": {
                  "line": 170,
                  "column": 53
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"none\""
            },
            {
              "name": "autocorrect",
              "type": "string | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 8
                },
                "end": {
                  "line": 176,
                  "column": 49
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"off\""
            },
            {
              "name": "autosave",
              "type": "string | null | undefined",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 8
                },
                "end": {
                  "line": 182,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "chips",
              "type": "Array.<Object>",
              "description": "A list of chip items to render",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 189,
                  "column": 8
                },
                "end": {
                  "line": 189,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "_value",
              "type": "string | null | undefined",
              "description": "Actual paper-input value",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 8
                },
                "end": {
                  "line": 193,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "allowed",
              "type": "Array.<String>",
              "description": "List of allowed chips labels. Character case does not matter.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 8
                },
                "end": {
                  "line": 198,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "source",
              "type": "Object.<(Stirng | Object)>",
              "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain `icon` property\nwhich is used to render `<iron-icon>`. It may also contain\n`image` property which is used to pass to `<iron-image>` element.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": \"add\"\n },\n {\n   \"value\": \"Image item\",\n   \"image\": \"path/to/image.png\"\n }\n]\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 226,
                  "column": 8
                },
                "end": {
                  "line": 226,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 230,
                  "column": 4
                },
                "end": {
                  "line": 236,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "validate",
              "description": "Validates the input element and sets an error style if needed.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 243,
                  "column": 4
                },
                "end": {
                  "line": 253,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "boolean"
              }
            },
            {
              "name": "_autofocusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 255,
                  "column": 4
                },
                "end": {
                  "line": 266,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeChipRemovable",
              "description": "Computes value for paper-chip's `removable` property.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 4
                },
                "end": {
                  "line": 274,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "Object",
                  "description": "`chips` list item."
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "addChip",
              "description": "Adds a new chip to the list of chips.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 281,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "label",
                  "type": "String",
                  "description": "Label of the chip"
                },
                {
                  "name": "removable",
                  "type": "?Boolean",
                  "description": "True if the chip can be removed."
                },
                {
                  "name": "icon",
                  "type": "?String",
                  "description": "An icon to pass to the chip."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeValue",
              "description": "Computes value of the form input. Produced value is an array of chip\nlabels.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 304,
                  "column": 4
                },
                "end": {
                  "line": 309,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "record",
                  "type": "Object",
                  "description": "Polymer's data change record."
                }
              ],
              "return": {
                "type": "(Array.<String> | undefined)"
              }
            },
            {
              "name": "_isAllowed",
              "description": "Tests if given value is allowed to enter when `allowed` property is set.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 315,
                  "column": 4
                },
                "end": {
                  "line": 327,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "description": "The value to test"
                }
              ],
              "return": {
                "type": "Boolean",
                "desc": "True if the value is allowed as a chip label."
              }
            },
            {
              "name": "_removeChip",
              "description": "Removes a chip on a specific index.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 333,
                  "column": 4
                },
                "end": {
                  "line": 339,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "index",
                  "type": "Number",
                  "description": "Index of the chip in the `chips` array"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 0
            },
            "end": {
              "line": 342,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ArcBehaviors.PaperChipInputMixin",
          "attributes": [
            {
              "name": "label",
              "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 8
                },
                "end": {
                  "line": 48,
                  "column": 29
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "value",
              "description": "The value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<iron-input>`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 56,
                  "column": 78
                }
              },
              "metadata": {},
              "type": "*"
            },
            {
              "name": "disabled",
              "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 8
                },
                "end": {
                  "line": 62,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "invalid",
              "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually.",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 8
                },
                "end": {
                  "line": 71,
                  "column": 46
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "allowed-pattern",
              "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 8
                },
                "end": {
                  "line": 78,
                  "column": 38
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "always-float-label",
              "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property.",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 8
                },
                "end": {
                  "line": 84,
                  "column": 55
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "pattern",
              "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property.",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 8
                },
                "end": {
                  "line": 90,
                  "column": 31
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "required",
              "description": "Set to true to mark the input as required. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `required` property.",
              "sourceRange": {
                "start": {
                  "line": 96,
                  "column": 8
                },
                "end": {
                  "line": 96,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "error-message",
              "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 8
                },
                "end": {
                  "line": 102,
                  "column": 36
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "char-counter",
              "description": "Set to true to show a character counter.",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 106,
                  "column": 36
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "auto-validate",
              "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property.",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 8
                },
                "end": {
                  "line": 112,
                  "column": 37
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "validator",
              "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 8
                },
                "end": {
                  "line": 118,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "autofocus",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 124,
                  "column": 65
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "inputmode",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 8
                },
                "end": {
                  "line": 130,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "minlength",
              "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 8
                },
                "end": {
                  "line": 137,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "maxlength",
              "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 144,
                  "column": 8
                },
                "end": {
                  "line": 144,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "name",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 8
                },
                "end": {
                  "line": 149,
                  "column": 28
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "placeholder",
              "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float.",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 8
                },
                "end": {
                  "line": 158,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "readonly",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 8
                },
                "end": {
                  "line": 164,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "autocapitalize",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 8
                },
                "end": {
                  "line": 170,
                  "column": 53
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "autocorrect",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty.",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 8
                },
                "end": {
                  "line": 176,
                  "column": 49
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "autosave",
              "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search.",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 8
                },
                "end": {
                  "line": 182,
                  "column": 32
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "chips",
              "description": "A list of chip items to render",
              "sourceRange": {
                "start": {
                  "line": 189,
                  "column": 8
                },
                "end": {
                  "line": 189,
                  "column": 28
                }
              },
              "metadata": {},
              "type": "Array.<Object>"
            },
            {
              "name": "allowed",
              "description": "List of allowed chips labels. Character case does not matter.",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 8
                },
                "end": {
                  "line": 198,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Array.<String>"
            },
            {
              "name": "source",
              "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain `icon` property\nwhich is used to render `<iron-icon>`. It may also contain\n`image` property which is used to pass to `<iron-image>` element.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": \"add\"\n },\n {\n   \"value\": \"Image item\",\n   \"image\": \"path/to/image.png\"\n }\n]\n```",
              "sourceRange": {
                "start": {
                  "line": 226,
                  "column": 8
                },
                "end": {
                  "line": 226,
                  "column": 29
                }
              },
              "metadata": {},
              "type": "Object.<(Stirng | Object)>"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ],
  "elements": [
    {
      "description": "An autocomplete element for `paper-chip-input`.\nIt is a lightweigth version of `paper-autocomplete` element.",
      "summary": "",
      "path": "paper-chip-autocomplete.html",
      "properties": [
        {
          "name": "source",
          "type": "Object.<(Stirng | Object)>",
          "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain `icon` property\nwhich is used to render `<iron-icon>`. It may also contain\n`image` property which is used to pass to `<iron-image>` element.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": \"add\"\n },\n {\n   \"value\": \"Image item\",\n   \"image\": \"path/to/image.png\"\n }\n]\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "The value of the input field connected to this autocomplete",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_suggestions",
          "type": "Array.<Object>",
          "description": "List of computed and sotred suggestion to render.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_hasSuggestions",
          "type": "boolean | null | undefined",
          "description": "Computed value, `true` if has any suggestions to render.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hasSuggestionsChanged\"",
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "scrollTarget",
          "type": "HTMLElement",
          "description": "Application's / parent element's scroll target element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "sizingTarget",
          "type": "HTMLElement",
          "description": "Sizing target element. It is used to compute the size of the\nautocomplete container.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "inputTarget",
          "type": "HTMLElement",
          "description": "The input element used to input value.\nIt is used to observe keys pressed",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 8
            },
            "end": {
              "line": 145,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selectedItem",
          "type": "Number",
          "description": "Currently selected item on a suggestions list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "_computeSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 184,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "source"
            }
          ]
        },
        {
          "name": "_computeHasSuggestions",
          "description": "Computes value for `hasSuggestions` property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "suggestions",
              "type": "?Array.<Object>",
              "description": "Computed suggestions"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "_hasSuggestionsChanged",
          "description": "Opens the suggestions if list of suggestions changed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 204,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasSuggestions",
              "type": "Boolean"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "selectPrevious",
          "description": "Highlight previous suggestion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "selectNext",
          "description": "Highlight next suggestion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 4
            },
            "end": {
              "line": 233,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "acceptSelection",
          "description": "Accepts currently selected suggestion and enters it into a text field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_inform",
          "description": "Dispatches non bubbling `selected` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Selected suggestion value."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ensureItemVisible",
          "description": "Ensure that the selected item is visible in the scroller.\nWhen there is more elements to show than space available (height)\nthen some elements will be hidden. When the user use arrows to navigate\nthe selection may get out from the screen. This function ensures that\ncurrently selected element is visible.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 300,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bottom",
              "type": "Boolean",
              "description": "If trully it will ensure that the element is\nvisible at the bottom of the container. On the top otherwise."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 65,
          "column": 2
        },
        "end": {
          "line": 308,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.PaperChipAutocomplete",
      "attributes": [
        {
          "name": "source",
          "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain `icon` property\nwhich is used to render `<iron-icon>`. It may also contain\n`image` property which is used to pass to `<iron-image>` element.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": \"add\"\n },\n {\n   \"value\": \"Image item\",\n   \"image\": \"path/to/image.png\"\n }\n]\n```",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 29
            }
          },
          "metadata": {},
          "type": "Object.<(Stirng | Object)>"
        },
        {
          "name": "value",
          "description": "The value of the input field connected to this autocomplete",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "scroll-target",
          "description": "Application's / parent element's scroll target element.",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 9
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "sizing-target",
          "description": "Sizing target element. It is used to compute the size of the\nautocomplete container.",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 9
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "input-target",
          "description": "The input element used to input value.\nIt is used to observe keys pressed",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 8
            },
            "end": {
              "line": 145,
              "column": 27
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "selected-item",
          "description": "Currently selected item on a suggestions list.",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected",
          "description": "Dispatched when suggestion is selected",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-chip-autocomplete",
      "mixins": [
        "Polymer.IronOverlayBehavior",
        "Polymer.IronScrollTargetBehavior"
      ]
    },
    {
      "description": "`paper-chip-input`\n\nA material design input with material design chips.\n\nIt renders chips on the left hand side of the input. It is added as an\nadd-on of the `paper-input` element.\n\nIt allows to provide list of suggestions that are rendered is user input\nallows to render suggestions.\n\n## Example\n\n```html\n<paper-chip-input\n label=\"List your favourite fruits\"\n required\n auto-validate\n name=\"fruits\"\n allowed='[\"apple\",\"Orange\",\"BANANA\"]'\n source='[\"Apple\", \"Apricot\", 'Banana',\"Orange\"]'\n pattern=\"[a-zA-Z]+\"\n error-message=\"This is not a fruit name!\"></paper-chip-input>\n```\n\n## Styling\n\n`<paper-chip-input>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-chip-input` | Mixin applied to this elment | `{}`\n\nUse `paper-input` and `paper-chip` styles to style the element.",
      "summary": "",
      "path": "paper-chip-input.html",
      "properties": [
        {
          "name": "_inputElement",
          "type": "Object | null | undefined",
          "description": "A paper input element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "value",
          "type": "*",
          "description": "The value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<iron-input>`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 78
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "allowedPattern",
          "type": "string | null | undefined",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean | null | undefined",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 84,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "pattern",
          "type": "string | null | undefined",
          "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "Set to true to mark the input as required. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `required` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 96,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "charCounter",
          "type": "boolean | null | undefined",
          "description": "Set to true to show a character counter.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 106,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autoValidate",
          "type": "boolean | null | undefined",
          "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 112,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "validator",
          "type": "string | null | undefined",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autofocus",
          "type": "boolean | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 65
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autofocusChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "inputmode",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 137,
              "column": 8
            },
            "end": {
              "line": 137,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 144,
              "column": 8
            },
            "end": {
              "line": 144,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 149,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 158,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autocapitalize",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 170,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 53
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"none\"",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autocorrect",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 176,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autosave",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 182,
              "column": 8
            },
            "end": {
              "line": 182,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "chips",
          "type": "Array.<Object>",
          "description": "A list of chip items to render",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 189,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_value",
          "type": "string | null | undefined",
          "description": "Actual paper-input value",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 193,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "allowed",
          "type": "Array.<String>",
          "description": "List of allowed chips labels. Character case does not matter.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 198,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "source",
          "type": "Object.<(Stirng | Object)>",
          "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain `icon` property\nwhich is used to render `<iron-icon>`. It may also contain\n`image` property which is used to pass to `<iron-image>` element.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": \"add\"\n },\n {\n   \"value\": \"Image item\",\n   \"image\": \"path/to/image.png\"\n }\n]\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 226,
              "column": 8
            },
            "end": {
              "line": 226,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_suggestionsOpened",
          "type": "boolean | null | undefined",
          "description": "True if the suggestions box is currently opened.\nPrevents `enter` from accepting the value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_positionTarget",
          "type": "Object | null | undefined",
          "description": "`iron-input` from the paper input to position auto suggestions\nproperly to the input real position.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "chipRemoveIcon",
          "type": "string | null | undefined",
          "description": "A name of the icon to render on the chip when `removable` property\nis set.\nBy default it referes to Polymer's default icons library, to the\n`clear` icon. You must include this library into your document.\nYou can also use whatever other icons library.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Validates the input element and sets an error style if needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_autofocusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_computeChipRemovable",
          "description": "Computes value for paper-chip's `removable` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "`chips` list item."
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "addChip",
          "description": "Adds a new chip to the list of chips.",
          "privacy": "public",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 281,
              "column": 4
            },
            "end": {
              "line": 297,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "label",
              "type": "String",
              "description": "Label of the chip"
            },
            {
              "name": "removable",
              "type": "?Boolean",
              "description": "True if the chip can be removed."
            },
            {
              "name": "icon",
              "type": "?String",
              "description": "An icon to pass to the chip."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_computeValue",
          "description": "Computes value of the form input. Produced value is an array of chip\nlabels.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 304,
              "column": 4
            },
            "end": {
              "line": 309,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record",
              "type": "Object",
              "description": "Polymer's data change record."
            }
          ],
          "return": {
            "type": "(Array.<String> | undefined)"
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_isAllowed",
          "description": "Tests if given value is allowed to enter when `allowed` property is set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 315,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "The value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the value is allowed as a chip label."
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_removeChip",
          "description": "Removes a chip on a specific index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 333,
              "column": 4
            },
            "end": {
              "line": 339,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "Index of the chip in the `chips` array"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "_enterHandler",
          "description": "Listens for Enter key click and accepts the chip value if it can\nbe accepted.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 4
            },
            "end": {
              "line": 158,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_backspaceHandler",
          "description": "Removes latest chip if there's no value in the text field.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_chipRemovedHandler",
          "description": "Handler for `chip-removed` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_suggestionSelected",
          "description": "Inserts chip from suggestion.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_chipFocused",
          "description": "Chips are focusable elements and they work really\nbed with paper-input as an addon.\nThis cancels the event so paper-input won't become focused.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "ClickEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_blurAll",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 111,
          "column": 2
        },
        "end": {
          "line": 221,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiElements.PaperChipInput",
      "attributes": [
        {
          "name": "label",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "value",
          "description": "The value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<iron-input>`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 78
            }
          },
          "metadata": {},
          "type": "*",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "disabled",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 33
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "invalid",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 46
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "allowed-pattern",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 38
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "always-float-label",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 84,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 55
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "pattern",
          "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 31
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `required` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 96,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 33
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "error-message",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 36
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "char-counter",
          "description": "Set to true to show a character counter.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 106,
              "column": 36
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 112,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 37
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "validator",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 33
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autofocus",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 65
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "inputmode",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 33
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "minlength",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 137,
              "column": 8
            },
            "end": {
              "line": 137,
              "column": 33
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 144,
              "column": 8
            },
            "end": {
              "line": 144,
              "column": 33
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "name",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 149,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "placeholder",
          "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 158,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "readonly",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 33
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autocapitalize",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 170,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 53
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autocorrect",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 176,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 49
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "autosave",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 182,
              "column": 8
            },
            "end": {
              "line": 182,
              "column": 32
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "chips",
          "description": "A list of chip items to render",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 189,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 28
            }
          },
          "metadata": {},
          "type": "Array.<Object>",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "allowed",
          "description": "List of allowed chips labels. Character case does not matter.",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 198,
              "column": 30
            }
          },
          "metadata": {},
          "type": "Array.<String>",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "source",
          "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain `icon` property\nwhich is used to render `<iron-icon>`. It may also contain\n`image` property which is used to pass to `<iron-image>` element.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": \"add\"\n },\n {\n   \"value\": \"Image item\",\n   \"image\": \"path/to/image.png\"\n }\n]\n```",
          "sourceRange": {
            "file": "paper-chip-input-mixin.html",
            "start": {
              "line": 226,
              "column": 8
            },
            "end": {
              "line": 226,
              "column": 29
            }
          },
          "metadata": {},
          "type": "Object.<(Stirng | Object)>",
          "inheritedFrom": "ArcBehaviors.PaperChipInputMixin"
        },
        {
          "name": "chip-remove-icon",
          "description": "A name of the icon to render on the chip when `removable` property\nis set.\nBy default it referes to Polymer's default icons library, to the\n`clear` icon. You must include this library into your document.\nYou can also use whatever other icons library.",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 30
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-chip-input",
      "mixins": [
        "ArcBehaviors.PaperChipInputMixin"
      ]
    }
  ]
}
